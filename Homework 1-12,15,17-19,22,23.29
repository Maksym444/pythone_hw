import math
1.
a=10.2
b=20.2
c=30.9
r=(a+b*(c/2))
print(round(r,1))

2.
a=10.2
b=20.2
r=(math.pow(a,2)+math.pow(b,2))%2
print(round(r,1))

a=10.2
b=20.2
r =(a**2+b**2)%2
print (r)

3.
a=10.2
b=20.2
c=30.9
r= (a + b) /12 *c%4 +b
print(round(r,1))
print(r)

4.
a=10.2
b=20.2
c=30.9
r= (a -b * c) / (a+b) %c
print(round(r,1))
print(r)

5.
a=10.2
b=20.2
c=30.9
r= math.fabs(a - b) // math.pow(a+b,3) - math.cos(c)
print(round(r,1))
print(r)

6.
a=10.2
b=20.2
c=30.9
z=(math.log (1+c)// -b)**4+a
print(round(z,4))

a=10.2
b=20.2
c=30.9
z= (math.log(1+c)//-b)
r=z**4+math.fabs(a)
print (r)

7.
def usa2euro(S1,S2,S3):
    return a,b
data= input('Введите дату в европейском формате:')
S1=data[:3];S2=data[3:6];S3=data[6:]
a=S2+S1+S3 #американское
b=S1+S2+S3 #европейское
result=usa2euro(S1,S2,S3)
print (result)

def euro2usa(S1,S2,S3):
    return c
data= input('Введите дату в европейском формате:')
S1=data[:3];S2=data[3:6];S3=data[6:]
c=S2+S1+S3 #американское
result=euro2usa(S1,S2,S3)
print (result)

8. Я
def mix(S1,S2,S3):
    result1=S2+S1+S3
    result2=S4+S5+S6
    return result1,result2
stroka="abcd"; stroka1="efgh"
S1=stroka[0:];S2=stroka1[0:2];S3=stroka1[2:]
S5=S2+S1+S3;S4=stroka[0:2];S6=stroka[2:]
result=mix(S1,S2,S3)
print (result)

# Не я, но я.
import math
def in_middle(string1, string2):
    result=string2[:math.floor(len(string2)/2)] + string1+ string2[math.floor(len(string2)/2):]
    return result
string1= input ('Введите строку1:')
string2= input('Введите строку2:')
result1=in_middle(string1,string2)
result=in_middle(result1,string1)
print (result1,result)

9.
def grad2rad(angle):
    return angle * math.pi / 180
    #return math.radians(angle)
angle=grad2rad(int(input("Введите число: ")))
result=math.cos(angle)
print(math.cos(result),'\t%f' %angle)

import math
def grad2rad1(angle):
    return angle * math.pi / 180
    #
angle1 = grad2rad(60)
result1 = math.cos(angle1)
print(math.cos(result1),'\t%s' %angle1)
angle2 = grad2rad1(45)
result2 = math.cos(angle2)
print(math.cos(result2),'\t%s' %angle2)
angle3 = grad2rad(40)
result3 = math.cos(angle3)
print(math.cos(result3),'\t%s' %angle3)

10.
a = int(input("Введите трехзначное число: "))
def sum_num (a):
    num1 = a % 10
    num2 = a % 100 // 10
    num3 = a // 100
    return num1+num2+num3
print("Сумма цифр числа:",sum_num(a))
__________________________________________________________
n = int(input("Введите трехзначное число: "))
def summa (n):
  d1 = n % 10
  n = n // 10
  d2 = n % 10
  n = n // 10
  d3 = n % 10
  return d1+d2+d3
print("Сумма цифр числа:", summa(n))

11.
a=float(input('Введите длину первого катета:'))
b =float(input('Введите длину второго катета:'))
def peri_metr_ploshad(a,b):
    Perimetr= a+b+math.sqrt(a*a+b*b)
    Ploshad= a*b/2
    return (round(Perimetr,3),round(Ploshad,3))
print(peri_metr_ploshad(a,b))

12.
num=int(input("Введите число для проверки:"))
def chetnoe_chislo(num):
    if num % 2 == 0:
        print('Четное число')
    elif num % 2 != 0:
        print('Нечетное число')
print(chetnoe_chislo(num))

num=int(input("Введите число для проверки:"))
def chetnoe_chislo(num):
 return (num % 2) == 0 #четное
 #return (num % 2) != 0 #нечетное
print (chetnoe_chislo(num))

#13.
import math
def circles(x1,x2,y1,y2):
    c=math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    return c
x1= int (input ("Введите точку 1 для первого круга:"))
y1=int (input ("Введите точку 2 для первого круга:"))
r1=int (input ("Введите радиус для первого круга:"))
x2=int (input ("Введите точку 1 для второго круга:"))
y2=int (input ("Введите точку 2 для второго круга:"))
r2=int (input ("Введите радиус для второго круга:"))
distance=circles(x1,x2,y1,y2)
if distance>r1+r2 or distance==r1+r2:
    print ("Окружности не пересекаються")
if distance<r1+r2 or (distance+r1)<=r2:
    print("Окружности пересекаються")
Better:
import math
def circles(x1,x2,y1,y2,r1,r2):
    circles=math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if not circles:
        return "Окружности не пересекаються" if r1 != r2 or circles > r1 + r2 else "Окружности пересекаються"
    else:
        return "Окружности не пересекаються" if circles > r1 + r2 or circles == r1 + r2 else "Окружности пересекаються"
x1= int (input ("Введите точку 1 для первого круга:"))
y1=int (input ("Введите точку 2 для первого круга:"))
r1=int (input ("Введите радиус для первого круга:"))
x2=int (input ("Введите точку 1 для второго круга:"))
y2=int (input ("Введите точку 2 для второго круга:"))
r2=int (input ("Введите радиус для второго круга:"))
print (circles(x1, y1, r1, x2, y2, r2))

NOT MINE, but mine
from math import sqrt
def calc_interception(x1, y1, r1, x2, y2, r2):
    cen_dist = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if not cen_dist:
        return "Нет" if r1 != r2 else "Да"
    else:
        return "Нет" if cen_dist > r1 + r2 else "Да"
x1= int (input ("Введите точку 1 для первого круга:"))
y1=int (input ("Введите точку 2 для первого круга:"))
r1=int (input ("Введите радиус для первого круга:"))
x2=int (input ("Введите точку 1 для второго круга:"))
y2=int (input ("Введите точку 2 для второго круга:"))
r2=int (input ("Введите радиус для второго круга:"))
print (calc_interception(x1, y1, r1, x2, y2, r2))
data = []
while True:
    line = input()
    if not line:
        break
    data.append(float(line))

print(calc_interception(*data))

14.
def have_trains_crashed(a, b, c, d):
    if a/(c/10*d)>=b/(c/10*c-d):
        print("Пронеслоооо))")
    else:
        print ("Пошли кишки по трубам))")
spd_tr1 =float(input("Скорость первого поезда:"))
spd_tr2 =float(input("Скорость второго поезда:"))
rass_to =float(input("Растояние пути:"))
rass_to_sver_1 = float(input("Растояние пути первого поезда до поворота:"))
have_trains_crashed(spd_tr1,spd_tr2,rass_to,rass_to_sver_1)

15.
import math
a = float(input("a="))
b = float(input("b="))
c = float(input("c="))
x=0
def discr_2(discr):
    return b ** 2 - 4 * a * c
print("Дискриминант D = %.2f" % discr_2(int))
if x > 0:
    x1 = (-b + math.sqrt(discr_2(int))) / (2 * a)
    x2 = (-b - math.sqrt(discr_2(int))) / (2 * a)
    print("x1 = %.2f \nx2 = %.2f" % (x1, x2))
elif discr_2 == 0:
    x = -b / (2 * a)
    print("x = %.2f" % x)
else:
    print("Корней нет")

a = float(input("a="))
b = float(input("b="))
c = float(input("c="))
def discr_2(discr):
    result = b ** 2 - 4 * a * c
    return result
x = discr_2(discr_2)
print("Дискриминант D = %.2f" % discr_2(discr_2))
if x > 0:
    x1 = (-b + math.sqrt(discr_2)) / (2 * a)
    x2 = (-b - math.sqrt(discr_2)) / (2 * a)
    print("x1 = %.2f \nx2 = %.2f" % (x1, x2))
elif discr_2 == 0:
    x = -b / (2 * a)
    print("x = %.2f" % x)
else:
    print("Корней нет")


17.
def fac(n):
    if n == 0:
        return 1
    return fac(n - 1) * n
result= (fac(5))
print (result)


18.
import random
def generate_random_number(length):
    return (random.randint(0,9) for _ in range(length))
print(generate_random_number(11))
print (max(int(x) for x in str(generate_random_number(11))))

def generate_random_number(upper,lower):
    return random.randint(upper,lower)
n=generate_random_number(000000000000,999999999999)
print(n)
print (max(str(n)))

def bigg_num(number):
    digit=random.randint(0,999999999999)
    number=digit
    max_num = max([int(i) for i in str(number)])
    return (number, max_num)
print (bigg_num(0))

19. 
import math
n = int(100)
lst=[]
for i in range(2, n+1):
    for a in lst:
        if a > int((math.sqrt(i)) + 1):
            lst.append(i)
            break
        if (i % a == 0):
            break
    else:
        lst.append(i)
print (lst)

def primes(n): #"""Возвращает все простые от 2 до N"""
  a = set(range(2, n))
  for num in range(2, n):
    if num in a:
      a -= set(range(2*num, n, num))
  return a
print (primes(100))

def prime_number(n):
   for num in range(2,n):
       if all(num % i != 0 for i in range(2, num)):
           print(num)
prime_number(100)

20.
def stepen_3():
    accumulator = 0
    for i in range(1, 101):
        accumulator = accumulator + i ** 3
    print(accumulator)
stepen_3()

21.
def chis_1_7():
    for number in range(1000):
            if str(number).find("1") !=-1:
                    if str(number).find("7") != -1:
                            print(number)
chis_1_7()

22.
import random
def choose():
    x = random.randint(1, 10)
    while True:
        y = int(input("Введите число:"))
        if y > 10:
            print("Диапазон числа от 1 до 10. Введите меньше! ")
            continue
        if y < -1:
            print("Диапазон числа от 1 до 10. Введите больше! ")
            continue
        if x < y:
            print("Введите меньше! ")
        elif x > y:
            print("Введите больше! ")
        else:
            print("Поздравляю Вы угадали!")
            break
choose()

23. Variant 1 
import math
import random
simple_list=[0]*2
def print_list(lst):
    for i in range(0,len(lst)):
         print("Element of the list is equal to", lst[i])
def fill_random_list(lst):
    for i in range(0, len(lst)):
        random_num = random.randint(0, 100)
        lst[i] = random_num
def find_average_from_list(lst):
    s=0
    for i in lst:
        s += i
    return s/len(lst)
fill_random_list(simple_list)
print_list(simple_list)
result = find_average_from_list(simple_list)
print (result)


23. Variant 2
import random
def print_list(lst):
    print("Element of the list is equal to", end=' ')
    for i in lst:
        print(i, end=' ')

def find_average_from_list(lst):
    s = 0
    for number in lst:
        s += number
    return s/len(lst)

rand_list = [random.randint(0, 100) for _ in range(10)]
print_list(rand_list)
result = find_average_from_list(rand_list)
print('\n')
print(result)

23. 2019 variant
import random
simple_list=[0]*20
def fill_random_list(lst):
    for i in range(0, len(lst)):
        random_num=random.randint(0,100)
        lst[i]=random_num
fill_random_list(simple_list)
print(sum(simple_list)/len(simple_list))


29. 
import string
import random
def generate_password(pass_len=8):
    all_sym = string.ascii_letters + string.digits + '_'
    while True:
        password = ''
        lowercase = 0
        uppercase = 0
        ints = 0
        for i in range(pass_len):
            _ = all_sym[random.randint(0, len(all_sym)-1)]
            password += _
            if _ in string.ascii_lowercase:
                lowercase += 1
            elif _ in string.ascii_uppercase:
                uppercase += 1
            elif _ in string.digits:
                ints += 1
        if lowercase and uppercase and ints:
            return password

print(generate_password(8))
print(generate_password(8))
print(generate_password(8))
print(generate_password(8))
print(generate_password(8))
